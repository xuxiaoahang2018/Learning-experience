1. get/post 的区别

*  get产生一个TCP 数据包，POST 会产生两个TCP 数据包
   对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；
   而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。
   post 一般用来提交数据，新增数据，PUT 用来更新数据
   
2. TCP/UDP 的区别

* (1) udp 面向报文的，既不合并也不拆分，只是添加UDP 首部，是无连接的，支持一对一，一对多和多对一
  (2) tcp 面向连接的，有流量控制，拥塞控制，提供全双工通信，会拆分数据包，每个TCP 连接是点对点的
  
3.TCP 为什么三次握手
* 防止失效的连接请求到达服务器，让服务器错误打开连接

4.TCP 关闭为什么四次挥手
* 因为是全双工通道，一个方向的连接关闭，但是另一个方向可以继续传输数据

5. TCP 长短连接
* 短连接： 双方都可以关闭连接，一般由客户端发起
  长连接： 在长连接应用下，客户度啊一般不会主动关闭连接，服务端一般会清理长时间没有读写操作的连接，限制长连接的数量
  
  
7. 一个TCP 可以对应几个HTTP 请求, 一个TCP连接中HTTP 请求可以一起发送嘛？
* 如果维持的是长连接的话，可以对应多个HTTP ； 目前http1.1 单个TCP连接在同一个时刻只能处理一个请求，同步的.
但是：在 HTTP/1.1 存在 Pipelining 技术可以完成这个多个请求同时发送，但是由于浏览器默认关闭，所以可以认为这是不可行的。
在 HTTP2 中由于 Multiplexing 特点的存在，多个 HTTP 请求可以在同一个 TCP 连接中并行进行。

8. 浏览器对同一个HOST 建立 TCP 数量有没有限制？
* 有，Chrome最多允许对同一个Host 建立六个TCP 链接，不通浏览器会有一些区别
  

9. CAP 分布式原理
* CAP  C一致性，A可用性，P分区容错性, CAP 定理指分布式系统中三者不可兼得，最多选两个。
解决方案有 2PC(两阶段提交) 3PC(三阶段提交) TCC(补偿事务) 本地消息表

10. ACID 是什么, 脏读／换读? 怎么会造成
* 一致性，原子性，持久性，隔离性
事物的隔离有四种， 1.读未提交。2读已提交，3读未提交 4可重复读




11. 为什么dict是无序的
* dict 底层是用的数组，插入的时候有键要哈希

12. docker 的网络模型
* Docker在创建容器时有四种网络模式，bridge为默认不需要用–net去指定，其他三种模式需要在创建容器时使用–net去指定。

   bridge模式，使用–net=bridge指定，默认设置。 容器和host 网络相同，可以通过iptables访问外部网络
   none模式，使用–net=none指定。 模式下创建容器是不会为容器配置任何网络参数； 这样创建出来的容器完全没有网络，需要自己去配置
   host模式，使用–net=host指定。 这种创建出来的容器，可以看到host上所有的网络设备。容器中，对这些设备有全部的访问权限。calico-node、calico-cni采用这种方式
   container模式，使用–net=container:容器名称或ID指定 ; kubernetes的pod网络模型本质上应用此方式。创建一个默认的pause容器，然后通过cni创建其网络；同一pod内的其他容器复用pause的网络

13. 进程／线程／groutine 


14. go 调度器 (GMP 模型)
Go语言的goroutine来自协程的概念，让一组可复用的函数运行在一组线程之上，即使有协程阻塞，该线程的其他协程也可以被runtime调度，转移到其他可运行的线程上。最关键的是，程序员看不到这些底层的细节，这就降低了编程的难度，提供了更容易的并发。
Go中，协程被称为goroutine，它非常轻量，一个goroutine只占几KB，并且这几KB就足够goroutine运行完，这就能在有限的内存空间内支持大量goroutine，支持了更多的并发。虽然一个goroutine的栈只占几KB，但实际是可伸缩的，如果需要更多内存，runtime会自动为goroutine分配


15.go 指针／引用传递
* int、float、bool、array、sturct等
  值传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数
  声明一个值类型变量时，编译器会在栈中分配一个空间，空间里存储的就是该变量的值　　

* slice，map，channel，interface，func，string等
  声明一个引用类型的变量，编译器会把实例的内存分配在堆上
  string和其他语言一样，是引用类型，string的底层实现struct String { byte* str; intgo len; }; 但是因为string不允许修改，每次操作string只能生成新的对象，所以在看起来使用时像值类型　　


16. new/make 
* make 用于内建类型分配内存，slice, map, channel 的初始化， 返回类型的零值
 new 用于其他值的初始化，返回的是指针
 
 
17. redis 的数据结构有哪些
* 五种，string, list, map, set sorted set(有序集合）

18. mysql mysam/innnodb 区别，锁区别
* mysam 不支持事物，表级锁，适合多读； innodb 支持事物，支持行级别锁，



19. 几种排序排序算法，以及时间复杂度，稳定／非稳定排序
* 快速排序、希尔排序、堆排序、直接选择排序不是稳定的排序算法。

基数排序、冒泡排序、直接插入排序、折半插入排序、归并排序是稳定的排序算法。


20. cookie/session 区别


21. go 调度模型／垃圾回收机制


22 进程／线程

* 进程是资源分配的最小单位,线程是程序执行的最小单位。


33.golang  runtime模型


34 rds 触发器是什么


35 mysql 给一个表两个字段a,b，并且都给他们创建索引，当他select * from table  where a ==1 and b ==1 的时候，查询逻辑怎么走，会不会都走两个索引。


36 python的循环引用什么情况造成，怎么去解，python 的垃圾回收机制，__del__

37. 单例模式的几种方式。


38. 定义一个空struct 有什么作用和他的用法


39. 鉴权怎么做的，如何加密
